{"version":3,"sources":["Components/ListComponent/index.js","Components/FormComponent/index.js","App.js","serviceWorker.js","index.js"],"names":["ListComponent","content","mydata","this","props","data","items","length","map","item","i","author","dp","avatar_url","react_default","a","createElement","reactstrap_es","md","key","href","html_url","target","rel","top","width","src","alt","commit","name","committer","message","className","Component","FormComponent","p","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","_ref","setState","defineProperty","value","sendtags","state","tag1","tag2","fetchdata","alert","isLoad","event","keyCode","which","fetch","concat","headers","Accept","response","json","LIST","Components_ListComponent","react","style","lineHeight","addonType","placeholder","onChange","onKeyPress","enterPressed","bind","color","onClick","App","Components_FormComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b50e73e9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Col\n} from \"reactstrap\";\nimport \"./style.css\";\n\nclass ListComponent extends Component {\n\n  render() {\n    const mydata = (this.props.data || []).items || [];\n    var content;\n    var len = ((this.props.data || {}).items || []).length;\n    if (len >= 1) {\n      content = mydata.map((item, i) => {\n        if (item.author != null) {\n          var dp = item.author.avatar_url;\n        }\n        return (\n          <Col md=\"3\" key={i}>\n            <Card>\n              <a href={item.author ? item.author.html_url : \"\"} target=\"_blank\" rel=\"noopener noreferrer\">\n                <CardImg top width=\"100px\" src={dp} alt=\"Github Image Link\" />\n              </a>\n              <CardBody>\n                <a\n                  href={item.author ? item.author.html_url : \"\"}\n                  target=\"_blank\" rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  <CardTitle>Author : {item.commit.author.name} </CardTitle>\n                </a>\n                <CardSubtitle>\n                  Committer: {item.commit.committer.name}\n                </CardSubtitle>\n                <CardText>CommitMessage: {item.commit.message}</CardText>\n              </CardBody>\n            </Card>\n          </Col>\n        );\n      });\n    } else {\n      content = (\n        <div className=\"nodata\">NO DATA OR SOMETHING WENT WRONG.TRY AGAIN!!</div>\n      );\n    }\n    return <div className=\"cardclass\">{content}</div>;\n  }\n}\n\nexport default ListComponent;\n","import React, { Component, Fragment } from \"react\";\nimport ListComponent from \"../ListComponent\";\nimport { Row, Col } from \"reactstrap\";\nimport { Button, Input, InputGroup, InputGroupAddon } from \"reactstrap\";\nimport \"./style.css\";\n\nclass FormComponent extends Component {\n  constructor(p) {\n    super(p);\n    this.state = {\n      tag1: null,\n      tag2: null,\n      data: null,\n      isLoad:true,\n    };\n  }\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value\n    });\n  };\n  enterPressed(event) {\n    var code = event.keyCode || event.which;\n    if(code === 13) { \n      this.sendtags()\n    } \n}\n  sendtags = () => {\n    if (this.state.tag1 && this.state.tag2) {\n      this.fetchdata()\n    } else {\n      alert(\"Fill Both the Tags To get Search Results\");\n    }\n  };\n  async fetchdata() {\n    const { tag1, tag2 } = this.state;\n    this.setState({isLoad:false})\n    var response = await fetch(\n      `https://api.github.com/search/commits?q=${tag1} ${tag2}`,\n      { headers: { Accept: \"  application/vnd.github.cloak-preview\" } }\n    );\n    var data = await response.json();\n    this.setState({ data: data});\n  }\n  render() {\n    var LIST;\n    if(this.state.isLoad && this.state.data == null){\n      LIST=<div className=\"nodata\">ENTER TAGS TO BEGIN SEARCH</div>\n    }\n    if(this.state.isLoad == false)\n    {\n      LIST=<div className=\"nodata\">FETCHING DATA.....</div>\n    }\n    if(this.state.isLoad == false && this.state.data !=null){\n      LIST=<ListComponent data={this.state.data}></ListComponent>\n    }\n    \n    return (\n      <Fragment>\n        <Row className=\"container\">\n          <Col md=\"2\" style={{ lineHeight: \"35px\" }}>\n            Enter Search Tags:\n          </Col>\n          <Col md=\"4\">\n            <InputGroup>\n              <InputGroupAddon addonType=\"prepend\">Tag1</InputGroupAddon>\n              <Input\n                placeholder=\"Type a Tag\"\n                name=\"tag1\"\n                onChange={this.handleChange}\n                onKeyPress={this.enterPressed.bind(this)}\n              />\n            </InputGroup>\n          </Col>\n          <Col md=\"4\">\n            <InputGroup>\n              <InputGroupAddon addonType=\"prepend\">Tag2</InputGroupAddon>\n              <Input\n                placeholder=\"Type a Tag\"\n                name=\"tag2\"\n                onChange={this.handleChange}\n                onKeyPress={this.enterPressed.bind(this)}\n              />\n            </InputGroup>\n          </Col>\n          <Col md=\"2\">\n            <Button color=\"primary\" onClick={this.sendtags}>\n              FindCommits\n            </Button>\n          </Col>\n        </Row>\n\n        {LIST}\n      </Fragment>\n    );\n  }\n}\n\nexport default FormComponent;\n","import React, { Component } from 'react';\nimport './App.css';\nimport FormComponent from './Components/FormComponent';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"outer\">\n         <FormComponent></FormComponent>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}